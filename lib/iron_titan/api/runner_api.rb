=begin
Titan API

The ultimate, language agnostic, container based job processing framework.

OpenAPI spec version: 0.3.3

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module IronTitan
  class RunnerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Mark job as failed.
    # Job is marked as failed if it was in a valid state. Job's `finished_at` time is initialized.
    # @param group_name Name of group for this set of jobs.
    # @param id Job id
    # @param reason Reason for job failure.
    # @param [Hash] opts the optional parameters
    # @return [JobWrapper]
    def groups_group_name_jobs_id_error_post(group_name, id, reason, opts = {})
      data, _status_code, _headers = groups_group_name_jobs_id_error_post_with_http_info(group_name, id, reason, opts)
      return data
    end

    # Mark job as failed.
    # Job is marked as failed if it was in a valid state. Job&#39;s &#x60;finished_at&#x60; time is initialized.
    # @param group_name Name of group for this set of jobs.
    # @param id Job id
    # @param reason Reason for job failure.
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobWrapper, Fixnum, Hash)>] JobWrapper data, response status code and response headers
    def groups_group_name_jobs_id_error_post_with_http_info(group_name, id, reason, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RunnerApi#groups_group_name_jobs_id_error_post ..."
      end
      
      # verify the required parameter 'group_name' is set
      fail "Missing the required parameter 'group_name' when calling groups_group_name_jobs_id_error_post" if group_name.nil?
      
      # verify the required parameter 'id' is set
      fail "Missing the required parameter 'id' when calling groups_group_name_jobs_id_error_post" if id.nil?
      
      # verify the required parameter 'reason' is set
      fail "Missing the required parameter 'reason' when calling groups_group_name_jobs_id_error_post" if reason.nil?
      
      # resource path
      local_var_path = "/groups/{group_name}/jobs/{id}/error".sub('{format}','json').sub('{' + 'group_name' + '}', group_name.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["reason"] = reason

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobWrapper')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RunnerApi#groups_group_name_jobs_id_error_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark job as started, ie: status = 'running'
    # Job status is changed to 'running' if it was in a valid state before. Job's `started_at` time is initialized.
    # @param group_name Name of group for this set of jobs.
    # @param id Job id
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [JobWrapper]
    def groups_group_name_jobs_id_start_post(group_name, id, body, opts = {})
      data, _status_code, _headers = groups_group_name_jobs_id_start_post_with_http_info(group_name, id, body, opts)
      return data
    end

    # Mark job as started, ie: status &#x3D; &#39;running&#39;
    # Job status is changed to &#39;running&#39; if it was in a valid state before. Job&#39;s &#x60;started_at&#x60; time is initialized.
    # @param group_name Name of group for this set of jobs.
    # @param id Job id
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobWrapper, Fixnum, Hash)>] JobWrapper data, response status code and response headers
    def groups_group_name_jobs_id_start_post_with_http_info(group_name, id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RunnerApi#groups_group_name_jobs_id_start_post ..."
      end
      
      # verify the required parameter 'group_name' is set
      fail "Missing the required parameter 'group_name' when calling groups_group_name_jobs_id_start_post" if group_name.nil?
      
      # verify the required parameter 'id' is set
      fail "Missing the required parameter 'id' when calling groups_group_name_jobs_id_start_post" if id.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling groups_group_name_jobs_id_start_post" if body.nil?
      
      # resource path
      local_var_path = "/groups/{group_name}/jobs/{id}/start".sub('{format}','json').sub('{' + 'group_name' + '}', group_name.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobWrapper')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RunnerApi#groups_group_name_jobs_id_start_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark job as succeeded.
    # Job status is changed to succeeded if it was in a valid state before. Job's `completed_at` time is initialized.
    # @param group_name Name of group for this set of jobs.
    # @param id Job id
    # @param [Hash] opts the optional parameters
    # @return [JobWrapper]
    def groups_group_name_jobs_id_success_post(group_name, id, opts = {})
      data, _status_code, _headers = groups_group_name_jobs_id_success_post_with_http_info(group_name, id, opts)
      return data
    end

    # Mark job as succeeded.
    # Job status is changed to succeeded if it was in a valid state before. Job&#39;s &#x60;completed_at&#x60; time is initialized.
    # @param group_name Name of group for this set of jobs.
    # @param id Job id
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobWrapper, Fixnum, Hash)>] JobWrapper data, response status code and response headers
    def groups_group_name_jobs_id_success_post_with_http_info(group_name, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RunnerApi#groups_group_name_jobs_id_success_post ..."
      end
      
      # verify the required parameter 'group_name' is set
      fail "Missing the required parameter 'group_name' when calling groups_group_name_jobs_id_success_post" if group_name.nil?
      
      # verify the required parameter 'id' is set
      fail "Missing the required parameter 'id' when calling groups_group_name_jobs_id_success_post" if id.nil?
      
      # resource path
      local_var_path = "/groups/{group_name}/jobs/{id}/success".sub('{format}','json').sub('{' + 'group_name' + '}', group_name.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobWrapper')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RunnerApi#groups_group_name_jobs_id_success_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
